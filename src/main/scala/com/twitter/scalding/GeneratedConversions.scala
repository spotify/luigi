/*
Copyright 2012 Twitter, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// following were autogenerated by ./scalding_gen.rb at Fri Mar 09 13:12:15 -0800 2012 do not edit
package com.twitter.scalding
import cascading.tuple.Tuple
import cascading.tuple.TupleEntry

trait GeneratedConversions extends LowPriorityConversions {

  implicit def tuple1Converter[A](implicit
    gA : TupleGetter[A]) = new TupleConverter[Tuple1[A]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple1(gA.get(tup, 0))
      }
      def arity = 1
  }

  implicit object Tup1Setter extends TupleSetter[Tuple1[_]] {
    override def apply(arg : Tuple1[_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup
    }

    override def arity = 1
  }

  implicit def tuple2Converter[A,B](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B]) = new TupleConverter[Tuple2[A,B]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple2(gA.get(tup, 0),
         gB.get(tup, 1))
      }
      def arity = 2
  }

  implicit object Tup2Setter extends TupleSetter[Tuple2[_,_]] {
    override def apply(arg : Tuple2[_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup
    }

    override def arity = 2
  }

  implicit def tuple3Converter[A,B,C](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C]) = new TupleConverter[Tuple3[A,B,C]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple3(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2))
      }
      def arity = 3
  }

  implicit object Tup3Setter extends TupleSetter[Tuple3[_,_,_]] {
    override def apply(arg : Tuple3[_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup
    }

    override def arity = 3
  }

  implicit def tuple4Converter[A,B,C,D](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D]) = new TupleConverter[Tuple4[A,B,C,D]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple4(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3))
      }
      def arity = 4
  }

  implicit object Tup4Setter extends TupleSetter[Tuple4[_,_,_,_]] {
    override def apply(arg : Tuple4[_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup
    }

    override def arity = 4
  }

  implicit def tuple5Converter[A,B,C,D,E](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E]) = new TupleConverter[Tuple5[A,B,C,D,E]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple5(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4))
      }
      def arity = 5
  }

  implicit object Tup5Setter extends TupleSetter[Tuple5[_,_,_,_,_]] {
    override def apply(arg : Tuple5[_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup
    }

    override def arity = 5
  }

  implicit def tuple6Converter[A,B,C,D,E,F](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F]) = new TupleConverter[Tuple6[A,B,C,D,E,F]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple6(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5))
      }
      def arity = 6
  }

  implicit object Tup6Setter extends TupleSetter[Tuple6[_,_,_,_,_,_]] {
    override def apply(arg : Tuple6[_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup
    }

    override def arity = 6
  }

  implicit def tuple7Converter[A,B,C,D,E,F,G](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G]) = new TupleConverter[Tuple7[A,B,C,D,E,F,G]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple7(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6))
      }
      def arity = 7
  }

  implicit object Tup7Setter extends TupleSetter[Tuple7[_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple7[_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup
    }

    override def arity = 7
  }

  implicit def tuple8Converter[A,B,C,D,E,F,G,H](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H]) = new TupleConverter[Tuple8[A,B,C,D,E,F,G,H]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple8(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7))
      }
      def arity = 8
  }

  implicit object Tup8Setter extends TupleSetter[Tuple8[_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple8[_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup
    }

    override def arity = 8
  }

  implicit def tuple9Converter[A,B,C,D,E,F,G,H,I](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I]) = new TupleConverter[Tuple9[A,B,C,D,E,F,G,H,I]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple9(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8))
      }
      def arity = 9
  }

  implicit object Tup9Setter extends TupleSetter[Tuple9[_,_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple9[_,_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup.add(arg._9)
      tup
    }

    override def arity = 9
  }

  implicit def tuple10Converter[A,B,C,D,E,F,G,H,I,J](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J]) = new TupleConverter[Tuple10[A,B,C,D,E,F,G,H,I,J]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple10(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9))
      }
      def arity = 10
  }

  implicit object Tup10Setter extends TupleSetter[Tuple10[_,_,_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple10[_,_,_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup.add(arg._9)
      tup.add(arg._10)
      tup
    }

    override def arity = 10
  }

  implicit def tuple11Converter[A,B,C,D,E,F,G,H,I,J,K](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K]) = new TupleConverter[Tuple11[A,B,C,D,E,F,G,H,I,J,K]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple11(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10))
      }
      def arity = 11
  }

  implicit object Tup11Setter extends TupleSetter[Tuple11[_,_,_,_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple11[_,_,_,_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup.add(arg._9)
      tup.add(arg._10)
      tup.add(arg._11)
      tup
    }

    override def arity = 11
  }

  implicit def tuple12Converter[A,B,C,D,E,F,G,H,I,J,K,L](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L]) = new TupleConverter[Tuple12[A,B,C,D,E,F,G,H,I,J,K,L]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple12(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11))
      }
      def arity = 12
  }

  implicit object Tup12Setter extends TupleSetter[Tuple12[_,_,_,_,_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple12[_,_,_,_,_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup.add(arg._9)
      tup.add(arg._10)
      tup.add(arg._11)
      tup.add(arg._12)
      tup
    }

    override def arity = 12
  }

  implicit def tuple13Converter[A,B,C,D,E,F,G,H,I,J,K,L,M](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M]) = new TupleConverter[Tuple13[A,B,C,D,E,F,G,H,I,J,K,L,M]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple13(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12))
      }
      def arity = 13
  }

  implicit object Tup13Setter extends TupleSetter[Tuple13[_,_,_,_,_,_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple13[_,_,_,_,_,_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup.add(arg._9)
      tup.add(arg._10)
      tup.add(arg._11)
      tup.add(arg._12)
      tup.add(arg._13)
      tup
    }

    override def arity = 13
  }

  implicit def tuple14Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N]) = new TupleConverter[Tuple14[A,B,C,D,E,F,G,H,I,J,K,L,M,N]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple14(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13))
      }
      def arity = 14
  }

  implicit object Tup14Setter extends TupleSetter[Tuple14[_,_,_,_,_,_,_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple14[_,_,_,_,_,_,_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup.add(arg._9)
      tup.add(arg._10)
      tup.add(arg._11)
      tup.add(arg._12)
      tup.add(arg._13)
      tup.add(arg._14)
      tup
    }

    override def arity = 14
  }

  implicit def tuple15Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O]) = new TupleConverter[Tuple15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple15(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14))
      }
      def arity = 15
  }

  implicit object Tup15Setter extends TupleSetter[Tuple15[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple15[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup.add(arg._9)
      tup.add(arg._10)
      tup.add(arg._11)
      tup.add(arg._12)
      tup.add(arg._13)
      tup.add(arg._14)
      tup.add(arg._15)
      tup
    }

    override def arity = 15
  }

  implicit def tuple16Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O],
    gP : TupleGetter[P]) = new TupleConverter[Tuple16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple16(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14),
         gP.get(tup, 15))
      }
      def arity = 16
  }

  implicit object Tup16Setter extends TupleSetter[Tuple16[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple16[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup.add(arg._9)
      tup.add(arg._10)
      tup.add(arg._11)
      tup.add(arg._12)
      tup.add(arg._13)
      tup.add(arg._14)
      tup.add(arg._15)
      tup.add(arg._16)
      tup
    }

    override def arity = 16
  }

  implicit def tuple17Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O],
    gP : TupleGetter[P],
    gQ : TupleGetter[Q]) = new TupleConverter[Tuple17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple17(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14),
         gP.get(tup, 15),
         gQ.get(tup, 16))
      }
      def arity = 17
  }

  implicit object Tup17Setter extends TupleSetter[Tuple17[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple17[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup.add(arg._9)
      tup.add(arg._10)
      tup.add(arg._11)
      tup.add(arg._12)
      tup.add(arg._13)
      tup.add(arg._14)
      tup.add(arg._15)
      tup.add(arg._16)
      tup.add(arg._17)
      tup
    }

    override def arity = 17
  }

  implicit def tuple18Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O],
    gP : TupleGetter[P],
    gQ : TupleGetter[Q],
    gR : TupleGetter[R]) = new TupleConverter[Tuple18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple18(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14),
         gP.get(tup, 15),
         gQ.get(tup, 16),
         gR.get(tup, 17))
      }
      def arity = 18
  }

  implicit object Tup18Setter extends TupleSetter[Tuple18[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple18[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup.add(arg._9)
      tup.add(arg._10)
      tup.add(arg._11)
      tup.add(arg._12)
      tup.add(arg._13)
      tup.add(arg._14)
      tup.add(arg._15)
      tup.add(arg._16)
      tup.add(arg._17)
      tup.add(arg._18)
      tup
    }

    override def arity = 18
  }

  implicit def tuple19Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O],
    gP : TupleGetter[P],
    gQ : TupleGetter[Q],
    gR : TupleGetter[R],
    gS : TupleGetter[S]) = new TupleConverter[Tuple19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple19(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14),
         gP.get(tup, 15),
         gQ.get(tup, 16),
         gR.get(tup, 17),
         gS.get(tup, 18))
      }
      def arity = 19
  }

  implicit object Tup19Setter extends TupleSetter[Tuple19[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple19[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup.add(arg._9)
      tup.add(arg._10)
      tup.add(arg._11)
      tup.add(arg._12)
      tup.add(arg._13)
      tup.add(arg._14)
      tup.add(arg._15)
      tup.add(arg._16)
      tup.add(arg._17)
      tup.add(arg._18)
      tup.add(arg._19)
      tup
    }

    override def arity = 19
  }

  implicit def tuple20Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O],
    gP : TupleGetter[P],
    gQ : TupleGetter[Q],
    gR : TupleGetter[R],
    gS : TupleGetter[S],
    gT : TupleGetter[T]) = new TupleConverter[Tuple20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple20(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14),
         gP.get(tup, 15),
         gQ.get(tup, 16),
         gR.get(tup, 17),
         gS.get(tup, 18),
         gT.get(tup, 19))
      }
      def arity = 20
  }

  implicit object Tup20Setter extends TupleSetter[Tuple20[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple20[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup.add(arg._9)
      tup.add(arg._10)
      tup.add(arg._11)
      tup.add(arg._12)
      tup.add(arg._13)
      tup.add(arg._14)
      tup.add(arg._15)
      tup.add(arg._16)
      tup.add(arg._17)
      tup.add(arg._18)
      tup.add(arg._19)
      tup.add(arg._20)
      tup
    }

    override def arity = 20
  }

  implicit def tuple21Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O],
    gP : TupleGetter[P],
    gQ : TupleGetter[Q],
    gR : TupleGetter[R],
    gS : TupleGetter[S],
    gT : TupleGetter[T],
    gU : TupleGetter[U]) = new TupleConverter[Tuple21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple21(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14),
         gP.get(tup, 15),
         gQ.get(tup, 16),
         gR.get(tup, 17),
         gS.get(tup, 18),
         gT.get(tup, 19),
         gU.get(tup, 20))
      }
      def arity = 21
  }

  implicit object Tup21Setter extends TupleSetter[Tuple21[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple21[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup.add(arg._9)
      tup.add(arg._10)
      tup.add(arg._11)
      tup.add(arg._12)
      tup.add(arg._13)
      tup.add(arg._14)
      tup.add(arg._15)
      tup.add(arg._16)
      tup.add(arg._17)
      tup.add(arg._18)
      tup.add(arg._19)
      tup.add(arg._20)
      tup.add(arg._21)
      tup
    }

    override def arity = 21
  }

  implicit def tuple22Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O],
    gP : TupleGetter[P],
    gQ : TupleGetter[Q],
    gR : TupleGetter[R],
    gS : TupleGetter[S],
    gT : TupleGetter[T],
    gU : TupleGetter[U],
    gV : TupleGetter[V]) = new TupleConverter[Tuple22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple22(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14),
         gP.get(tup, 15),
         gQ.get(tup, 16),
         gR.get(tup, 17),
         gS.get(tup, 18),
         gT.get(tup, 19),
         gU.get(tup, 20),
         gV.get(tup, 21))
      }
      def arity = 22
  }

  implicit object Tup22Setter extends TupleSetter[Tuple22[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]] {
    override def apply(arg : Tuple22[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]) = {
      val tup = new Tuple
      tup.add(arg._1)
      tup.add(arg._2)
      tup.add(arg._3)
      tup.add(arg._4)
      tup.add(arg._5)
      tup.add(arg._6)
      tup.add(arg._7)
      tup.add(arg._8)
      tup.add(arg._9)
      tup.add(arg._10)
      tup.add(arg._11)
      tup.add(arg._12)
      tup.add(arg._13)
      tup.add(arg._14)
      tup.add(arg._15)
      tup.add(arg._16)
      tup.add(arg._17)
      tup.add(arg._18)
      tup.add(arg._19)
      tup.add(arg._20)
      tup.add(arg._21)
      tup.add(arg._22)
      tup
    }

    override def arity = 22
  }
}
// end of autogenerated
